#########################################################
#
# Create a Github Release
# Publish to npm
#
#########################################################

name: Release

on:
  push:
    branches:
      - main
    # Review gh actions docs if you want to further define triggers, paths, etc
    # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#on


jobs:
  release:
    name: Release to GitHub and npm
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # see: https://github.com/pnpm/action-setup for how to use cache
      - uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: pnpm

      - name: git config
        run: |
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"


      - name: Install dependencies
        run: pnpm install --fix-lockfile

      - name: Build workspaces
        run: pnpm run build
      

      - name: Release to NPM
        run: |
          npm config set //registry.npmjs.org/:_authToken $NPM_TOKEN
          # Read version from package.json
          PACKAGE_VERSION=$(jq -r .version package.json)
          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
          # Get the latest version from npm
          NPM_VERSION=$(npm show @ts-cogs/void version)
          echo "NPM_VERSION=$NPM_VERSION" >> $GITHUB_OUTPUT
          # Compare the two versions
          if [ "$PACKAGE_VERSION" == "$NPM_VERSION" ]; then
              echo "The version in package.json corresponds to the latest version in npm."
          else
              echo "The version in package.json does not correspond to the latest version in npm."
              pnpm run release
          fi
          
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

  tag:
    runs-on: ubuntu-latest
    needs: [release]
    if: ${{ needs.release.output.PACKAGE_VERSION}} != ${{ needs.release.output.NPM_VERSION}}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # see: https://github.com/marketplace/actions/create-update-tag
      - uses: rickstaa/action-create-tag@v1
        id: "tag_create"
        with:
          tag: 'v${{ needs.release.output.PACKAGE_VERSION}}'
          tag_exists_error: false
          message: 'Release $(if [[ ${{ needs.release.output.PACKAGE_VERSION}} == *"rc"* ]]; then echo "candidate "; fi) v${{ needs.release.output.PACKAGE_VERSION}}'

      
      # Print result using the env variable.
      - run: |
          echo "Tag already present: ${{ env.TAG_EXISTS }}"

      # Print result using the action output.
      - run: |
          echo "Tag already present: ${{ steps.tag_create.outputs.tag_exists }}"


      - name: Create GH Release
        uses: actions/github-script@v7
        with:
          github-token: "${{ secrets.GH_TOKEN }}"
          script: |
            github.rest.git.createTag({
              owner: 'ts-cogs',
              repo: 'ts-cogs',
              tag_name: 'v${{ needs.release.output.PACKAGE_VERSION}}',
              prerelease: $(if [[ ${{ needs.release.output.PACKAGE_VERSION}} == *"rc"* ]]; then echo "true "; else echo "false"; fi)
            })
       