#########################################################
#
# Create a Github Release
# Publish to npm
#
#########################################################

name: Release

on:
  push:
    branches:
      - main
    # Review gh actions docs if you want to further define triggers, paths, etc
    # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#on


jobs:
  release:
    name: Release to GitHub and npm
    runs-on: ubuntu-latest
    outputs:
      PACKAGE_VERSION: ${{ steps.npm.outputs.PACKAGE_VERSION }}
      CREATE_RELEASE: ${{ steps.npm.outputs.CREATE_RELEASE }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # see: https://github.com/pnpm/action-setup for how to use cache
      - uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: pnpm

      - name: git config
        run: |
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"


      - name: Install dependencies
        run: pnpm install --fix-lockfile

      - name: Build workspaces
        run: pnpm run build
      

      - name: Release to NPM
        id: npm
        run: |
          npm config set //registry.npmjs.org/:_authToken $NPM_TOKEN
          # Read version from package.json
          PACKAGE_VERSION=$(jq -r .version package.json)
          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
          # Get the latest version from npm
          NPM_VERSION=$(npm show @ts-cogs/void version)
          echo "NPM_VERSION=$NPM_VERSION" >> $GITHUB_OUTPUT
          CREATE_RELEASE=$(if [[ $PACKAGE_VERSION == *"rc"* ]]; then echo "false"; else echo "true"; fi)
          echo "CREATE_RELEASE=$CREATE_RELEASE" >> $GITHUB_OUTPUT
          echo "versions: $PACKAGE_VERSION - $NPM_VERSION - $CREATE_RELEASE"
          # Compare the two versions
          if [ "$PACKAGE_VERSION" == "$NPM_VERSION" ]; then
              echo "The version in package.json corresponds to the latest version in npm."
          else
              echo "The version in package.json does not correspond to the latest version in npm."
              pnpm run release
          fi
          
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

  # prerelease: $(if [[ ${{ needs.release.output.PACKAGE_VERSION}} == *"rc"* ]]; then echo "true "; else echo "false"; fi)
  tag:
    runs-on: ubuntu-latest
    needs: [release]
    if: ${{ needs.release.outputs.CREATE_RELEASE == *"true"* && needs.release.outputs.PACKAGE_VERSION != needs.release.outputs.NPM_VERSION }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # use Github cli in actions: https://docs.github.com/en/actions/using-workflows/using-github-cli-in-workflows
      # GH CLI create Release: https://cli.github.com/manual/gh_release_create
      - name: Create GH Release
        run: gh release create $PACKAGE_VERSION --notes-file changelog.md
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          PACKAGE_VERSION: ${{ needs.release.outputs.PACKAGE_VERSION}}
            